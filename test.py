import numpy as np
import matplotlib.pyplot as plt
A = np.load("dataset_numpy_threshold/A_subject_000.npy")


def check_adjacency_matrix(A: np.ndarray, n_nodes: int = 180, verbose: bool = True) -> bool:
    """
    V√©rifie la validit√© structurelle d'une matrice d'adjacence A.
    - dimensions correctes
    - sym√©trie
    - diagonale nulle
    - valeurs binaires (0 ou 1)
    - connexit√© (optionnelle)
    """

    ok = True

    # 1Ô∏è‚É£ Dimensions
    if A.shape != (n_nodes, n_nodes):
        print(f"‚ùå Mauvaise taille: {A.shape}, attendu {(n_nodes, n_nodes)}")
        ok = False
    elif verbose:
        print("‚úÖ Dimensions correctes")

    # 2Ô∏è‚É£ Sym√©trie
    if not np.allclose(A, A.T):
        print("‚ùå La matrice n‚Äôest pas sym√©trique")
        ok = False
    elif verbose:
        print("‚úÖ Sym√©trie OK")

    # 3Ô∏è‚É£ Diagonale nulle
    if np.any(np.diag(A) != 0):
        print("‚ùå Diagonale non nulle (boucles pr√©sentes)")
        ok = False
    elif verbose:
        print("‚úÖ Diagonale nulle")

    # 4Ô∏è‚É£ Valeurs binaires
    unique_vals = np.unique(A)
    if not np.all(np.isin(unique_vals, [0, 1])):
        print(f"‚ùå Valeurs inattendues : {unique_vals}")
        ok = False
    elif verbose:
        print("‚úÖ Valeurs binaires")

    # 5Ô∏è‚É£ Optionnel : connexit√© (si NetworkX dispo)
    try:
        import networkx as nx
        G = nx.from_numpy_array(A)
        if not nx.is_connected(G):
            print("‚ö†Ô∏è Graphe non connexe : certaines r√©gions ne sont pas reli√©es")
        elif verbose:
            print("‚úÖ Graphe connexe")
    except ImportError:
        pass

    if ok and verbose:
        print("üéâ La matrice A est bien structur√©e.")
    return ok

ok = check_adjacency_matrix(A)


